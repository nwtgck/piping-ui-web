{"version":3,"sources":["webpack:///src/components/src/components/DataViewer.vue"],"names":[],"mappings":"AAucA,4BACA,qBAAA,CACA,eAAA,CACA,YAAA,CACA,eAAA,CACA,cAAA,CACA,iBAAA,CACA,iBACA","file":"chunk-23c853ac.4b3196e7.css","sourcesContent":["<template>\n  <v-expansion-panel>\n    <v-expansion-panel-header :disable-icon-rotate=\"isDoneDownload || hasError\">\n      <span>{{ strings['view_in_viewer'] }} #{{ props.viewNo }}</span>\n      <!-- Percentage -->\n      {{ progressPercentage ? `${progressPercentage.toFixed(2)} %` : \"\" }}\n      <template v-slot:actions>\n        <v-icon :color=\"headerIconColor\" style=\"margin-left: 0.3em\">\n          {{ headerIcon}}\n        </v-icon>\n      </template>\n    </v-expansion-panel-header>\n    <v-expansion-panel-content>\n\n      <v-alert type=\"info\" v-if=\"props.protection.type === 'passwordless' && verificationStep.type === 'initial'\">\n        <span style=\"\">{{ strings['waiting_for_sender'] }}</span>\n      </v-alert>\n\n      <!-- NOTE: Don't use v-if because the \"sibling\" element uses \"ref\" and the ref is loaded in mounted(), but don't know why \"sibling\" affects. -->\n      <span v-show=\"props.protection.type === 'passwordless' && verificationStep.type === 'verification_code_arrived'\">\n        <VerificationCode :value=\"verificationStep.verificationCode\"/>\n      </span>\n\n      <!-- NOTE: Don't use v-if because the \"sibling\" element uses \"ref\" and the ref is loaded in mounted(), but don't know why \"sibling\" affects. -->\n      <span v-show=\"isReadyToDownload\">\n        <!-- loaded of total -->\n        <v-tooltip bottom>\n          <template v-slot:activator=\"{ on }\">\n            <div style=\"text-align: center\" v-on=\"on\">\n              {{ readableBytesString(progressSetting.loadedBytes, 1) }}{{ !progressSetting.totalBytes ? \"\" : ` of ${readableBytesString(progressSetting.totalBytes, 1)}` }}\n            </div>\n          </template>\n          <span>{{ progressSetting.loadedBytes }}{{ !progressSetting.totalBytes ? \"\" : ` of ${progressSetting.totalBytes}` }}</span>\n        </v-tooltip>\n\n          <!-- Progress bar -->\n        <v-progress-linear :value=\"progressPercentage\"\n                           :indeterminate=\"progressPercentage === null && !canceled && errorMessage() === ''\" />\n      </span>\n\n      <div v-show=\"isDecrypting\">\n        <div style=\"text-align: center\">\n          {{ strings['decrypting'] }}\n        </div>\n        <!-- Decryption progress bar -->\n        <v-progress-linear indeterminate />\n      </div>\n\n      <v-simple-table class=\"text-left\">\n        <tbody>\n        <tr class=\"text-left\">\n          <td>{{ strings['download_url'] }}</td>\n          <td>{{ downloadPath }}</td>\n        </tr>\n        </tbody>\n      </v-simple-table>\n\n      <!-- NOTE: The reason why don't use .protection.type === 'password' is that a user may forget to check \"Protect with password\" despite the data is encrypted with a password -->\n      <div v-if=\"props.protection.type !== 'passwordless' && isDoneDownload\">\n        <v-layout>\n          <v-switch v-model=\"enablePasswordReinput\"\n                    inset\n                    :label=\"strings['reinput_password']\"\n                    color=\"blue\"\n                    style=\"padding-left: 0.5em;\"/>\n\n          <v-text-field v-if=\"enablePasswordReinput\"\n                        v-model=\"props.password\"\n                        :type=\"showsPassword ? 'text' : 'password'\"\n                        :label=\"strings['password']\"\n                        :append-icon=\"showsPassword ? icons.mdiEye : icons.mdiEyeOff\"\n                        @click:append=\"showsPassword = !showsPassword\"\n                        single-line\n                        style=\"margin-left: 0.5em;\"\n                        outlined/>\n        </v-layout>\n        <div v-if=\"enablePasswordReinput\" style=\"text-align: right\">\n          <v-btn color=\"primary\"\n                 text\n                 @click=\"decryptIfNeedAndViewBlob(props.protection.password)\">\n            <v-icon >{{ icons.mdiKey }}</v-icon>\n            {{ strings['unlock'] }}\n          </v-btn>\n          <v-btn color=\"primary\"\n                 text\n                 @click=\"viewRaw()\">\n            <v-icon >{{ icons.mdiFeatureSearchOutline }}</v-icon>\n            {{ strings['view_raw'] }}\n          </v-btn>\n        </div>\n      </div>\n\n      <!-- Image viewer -->\n      <div v-show=\"imgSrc.url !== undefined\" style=\"text-align: center\">\n        <img :src=\"imgSrc.url\"\n             style=\"width: 95%\">\n      </div>\n\n      <!-- Video viewer -->\n      <div v-if=\"videoSrc.url !== undefined\" style=\"text-align: center\">\n        <video :src=\"videoSrc.url\"\n               style=\"width: 95%\"\n               controls />\n      </div>\n\n      <!-- Text viewer -->\n      <!-- NOTE: Don't use v-if because the inner uses \"ref\" and the ref is loaded in mounted()-->\n      <div v-show=\"linkifiedText !== ''\" style=\"text-align: center\">\n        <div style=\"text-align: right\">\n          <v-tooltip v-model=\"showsCopied\" bottom>\n            <template v-slot:activator=\"{}\">\n              <v-btn ref=\"text_copy_button\" style=\"background-color: #dcdcdc; margin-bottom: 0.3em;\">\n                <!-- (from: https://iconify.design/icon-sets/octicon/clippy.html) -->\n                <svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" aria-hidden=\"true\" focusable=\"false\" width=\"1.5em\" height=\"1.5em\" style=\"-ms-transform: rotate(360deg); -webkit-transform: rotate(360deg); transform: rotate(360deg);\" preserveAspectRatio=\"xMidYMid meet\" viewBox=\"0 0 14 16\"><path fill-rule=\"evenodd\" d=\"M2 13h4v1H2v-1zm5-6H2v1h5V7zm2 3V8l-3 3 3 3v-2h5v-2H9zM4.5 9H2v1h2.5V9zM2 12h2.5v-1H2v1zm9 1h1v2c-.02.28-.11.52-.3.7-.19.18-.42.28-.7.3H1c-.55 0-1-.45-1-1V4c0-.55.45-1 1-1h3c0-1.11.89-2 2-2 1.11 0 2 .89 2 2h3c.55 0 1 .45 1 1v5h-1V6H1v9h10v-2zM2 5h8c0-.55-.45-1-1-1H8c-.55 0-1-.45-1-1s-.45-1-1-1-1 .45-1 1-.45 1-1 1H3c-.55 0-1 .45-1 1z\" fill=\"#000000\"/></svg>\n              </v-btn>\n            </template>\n            <span>{{ strings['copied'] }}</span>\n          </v-tooltip>\n        </div>\n        <pre v-html=\"linkifiedText\"\n             class=\"text-view\"\n             ref=\"text_viewer\"/>\n      </div>\n\n      <div v-if=\"isCancelable\" style=\"text-align: right\">\n        <!-- Cancel button -->\n        <v-btn color=\"warning\"\n               outlined\n               class=\"ma-2 justify-end\"\n               @click=\"cancelDownload()\">\n          <v-icon >{{ icons.mdiCloseCircle }}</v-icon>\n          {{ strings['cancel'] }}\n        </v-btn>\n      </div>\n\n      <!-- Save button -->\n      <v-btn v-if=\"isDoneDownload && !hasError\"\n             color=\"primary\"\n             block\n             @click=\"save()\"\n             style=\"margin-top: 1em;\">\n        <v-icon >{{ icons.mdiContentSave }}</v-icon>\n        {{ strings['save'] }}\n      </v-btn>\n\n      <v-alert type=\"error\"\n               outlined\n               :value=\"hasError\">\n        {{ errorMessage() }}\n      </v-alert>\n\n    </v-expansion-panel-content>\n  </v-expansion-panel>\n\n</template>\n\n<script lang=\"ts\">\n/* eslint-disable no-console */\n\nimport { Component, Prop, Vue } from 'vue-property-decorator';\nimport urlJoin from 'url-join';\nimport linkifyHtml from 'linkifyjs/html';\nconst FileSaverAsync = () => import('file-saver');\nimport Clipboard from 'clipboard';\nimport * as fileType from 'file-type/browser';\nimport {blobToUint8Array} from 'binconv/dist/src/blobToUint8Array';\nimport {uint8ArrayToBlob} from 'binconv/dist/src/uint8ArrayToBlob';\nimport {blobToReadableStream} from 'binconv/dist/src/blobToReadableStream';\nimport {mdiAlert, mdiCheck, mdiChevronDown, mdiContentSave, mdiCloseCircle, mdiEye, mdiEyeOff, mdiKey, mdiFeatureSearchOutline} from \"@mdi/js\";\n\nimport {globalStore} from \"@/vue-global\";\nimport {strings} from \"@/strings\";\nimport * as utils from '@/utils';\nimport * as pipingUiUtils from \"@/piping-ui-utils\";\nimport AsyncComputed from 'vue-async-computed-decorator';\nimport type {Protection, VerificationStep, VerifiedParcel, verifiedParcelFormat} from \"@/datatypes\";\nimport VerificationCode from \"@/components/VerificationCode.vue\";\nimport {BlobUrlManager} from \"@/blob-url-manager\";\nimport {pipingUiAuthAsync} from \"@/pipingUiAuthWithWebpackChunkName\"\n\n\nexport type DataViewerProps = {\n  viewNo: number,\n  serverUrl: string,\n  secretPath: string,\n  protection: Protection,\n};\n\n// NOTE: Automatically download when mounted\n@Component({\n  components: {\n    VerificationCode,\n  },\n})\nexport default class DataViewer extends Vue {\n  @Prop() private props!: DataViewerProps;\n\n  // Progress bar setting\n  private progressSetting: {loadedBytes: number, totalBytes?: number} = {\n    loadedBytes: 0,\n    totalBytes: undefined,\n  };\n\n  private readableBytesString = utils.readableBytesString;\n\n  private errorMessage: () => string = () => \"\";\n  private xhr: XMLHttpRequest;\n  private isDoneDownload: boolean = false;\n  private canceled: boolean = false;\n  private imgSrc: BlobUrlManager= new BlobUrlManager();\n  private videoSrc: BlobUrlManager= new BlobUrlManager();\n  private text: string = '';\n  private enablePasswordReinput: boolean = false;\n  private showsPassword: boolean = false;\n  private verificationStep: VerificationStep = {type: 'initial'};\n\n  private rawBlob: Blob = new Blob();\n  private blob: Blob = new Blob();\n\n  private showsCopied: boolean = false;\n  private isDecrypting: boolean = false;\n\n  private icons = {\n    mdiContentSave,\n    mdiCloseCircle,\n    mdiEye,\n    mdiEyeOff,\n    mdiKey,\n    mdiFeatureSearchOutline,\n  };\n\n  // for language support\n  private get strings() {\n    return strings(globalStore.language);\n  }\n\n  private get progressPercentage(): number | null {\n    if (this.isDoneDownload) {\n      return 100;\n    } else if (this.progressSetting.totalBytes === undefined) {\n      return null;\n    } else if (this.progressSetting.totalBytes === 0) {\n      return 100;\n    } else {\n      return this.progressSetting.loadedBytes / this.progressSetting.totalBytes * 100;\n    }\n  }\n\n  private get hasError(): boolean {\n    return this.errorMessage() !== \"\";\n  }\n\n  private get headerIcon(): string {\n    if (this.hasError) {\n      return mdiAlert;\n    } else if (this.canceled) {\n      return mdiCloseCircle;\n    } else if (this.isDoneDownload) {\n      return mdiCheck;\n    } else {\n      return mdiChevronDown;\n    }\n  }\n\n  private get headerIconColor(): string | undefined {\n    if (this.hasError) {\n      return \"error\";\n    } else if (this.canceled) {\n      return \"warning\";\n    } else if (this.isDoneDownload) {\n      return \"teal\";\n    } else {\n      return undefined\n    }\n  }\n\n  private get isCancelable(): boolean {\n    return this.isReadyToDownload && !this.isDoneDownload && !this.hasError && !this.canceled;\n  }\n\n  private get isReadyToDownload(): boolean {\n    return this.props.protection.type === 'passwordless' ? this.verificationStep.type === 'verified' && this.verificationStep.verified : true\n  }\n\n  private get downloadPath(): string {\n    return urlJoin(this.props.serverUrl, this.props.secretPath);\n  }\n\n  @AsyncComputed()\n  private async linkifiedText(): Promise<string> {\n    return utils.sanitizeHtmlAllowingATag(linkifyHtml(this.text, {\n      defaultProtocol: 'https'\n    }));\n  }\n\n  constructor() {\n    super();\n    this.xhr = new XMLHttpRequest();\n  }\n\n  async mounted() {\n    // Scroll to this element\n    // NOTE: no need to add `await`\n    pipingUiUtils.scrollTo(this.$el);\n\n    // Setting for copying to clipboard\n    new Clipboard((this.$refs.text_copy_button as Vue).$el, {\n      target: () => {\n        this.showsCopied = true;\n        setTimeout(() => {\n          this.showsCopied = false;\n        }, 2000);\n        return this.$refs.text_viewer as Element\n      }\n    });\n\n    // Key exchange\n    const keyExchangeRes = await (await pipingUiAuthAsync).keyExchangeAndReceiveVerified(\n      this.props.serverUrl,\n      this.props.secretPath,\n      this.props.protection,\n      (step: VerificationStep) => {\n        this.verificationStep = step;\n      }\n    );\n\n    // If error\n    if (keyExchangeRes.type === \"error\") {\n      this.errorMessage = () => keyExchangeRes.errorMessage(globalStore.language);\n      return;\n    }\n    const {key} = keyExchangeRes;\n\n    this.xhr.open('GET', this.downloadPath);\n    this.xhr.responseType = 'blob';\n    this.xhr.onprogress = (ev) => {\n      console.log(`Download: ${ev.loaded}`)\n    };\n    this.xhr.onreadystatechange = (ev) => {\n      if (this.xhr.readyState === XMLHttpRequest.HEADERS_RECEIVED) {\n        const length: string | null = this.xhr.getResponseHeader('Content-Length');\n        if (length !== null) {\n          this.progressSetting.totalBytes = parseInt(length, 10);\n        }\n      }\n    };\n    this.xhr.onprogress = (ev) => {\n      this.progressSetting.loadedBytes = ev.loaded;\n    };\n    this.xhr.onload = async (ev) => {\n      if (this.xhr.status === 200) {\n        this.isDoneDownload = true;\n        // Get raw response body\n        this.rawBlob = this.xhr.response;\n        // Decrypt and view blob if possible\n        this.decryptIfNeedAndViewBlob(key);\n      } else {\n        const responseText = await utils.readBlobAsText(this.xhr.response);\n        this.errorMessage = () => this.strings['xhr_status_error']({\n          status: this.xhr.status,\n          response: responseText,\n        });\n      }\n    };\n    this.xhr.onerror = () => {\n      this.errorMessage = () => this.strings['data_viewer_xhr_onerror'];\n    };\n    this.xhr.send();\n  }\n\n  private async viewBlob() {\n    // Reset viewers\n    this.imgSrc.clearIfNeed();\n    this.videoSrc.clearIfNeed();\n    this.text = '';\n\n    const isText: boolean = await (async () => {\n      // NOTE: 4100 was used in FileType.minimumBytes in file-type until 13.1.2\n      const nBytes = 4100;\n      // Get first bytes from blob\n      const firstChunk: Uint8Array = await blobToUint8Array(this.blob.slice(0, nBytes));\n      return utils.isText(firstChunk);\n    })();\n\n    // If body is text\n    if (isText) {\n      // Set text\n      this.text = await utils.readBlobAsText(this.blob);\n    } else {\n      // Detect type of blob\n      const fileTypeResult = await fileType.fromStream(blobToReadableStream(this.blob));\n      if (fileTypeResult !== undefined) {\n        if (fileTypeResult.mime.startsWith(\"image/\")) {\n          this.imgSrc.set(this.blob);\n        } else if (fileTypeResult.mime.startsWith(\"video/\")) {\n          this.videoSrc.set(this.blob);\n        } else if (fileTypeResult.mime.startsWith(\"text/\")) {\n          // Set text\n          this.text = await utils.readBlobAsText(this.blob);\n        }\n      }\n    }\n\n  }\n\n  private async decryptIfNeedAndViewBlob(password: string | Uint8Array | undefined) {\n    this.blob = await (async () => {\n      if (password === undefined) {\n        return this.rawBlob;\n      } else {\n        // Get response body\n        const resBody = await blobToUint8Array(this.rawBlob);\n        try {\n          this.isDecrypting = true;\n          // Decrypt the response body\n          const plain = await utils.decrypt(resBody, password);\n          this.enablePasswordReinput = false;\n          this.errorMessage = () => '';\n          return uint8ArrayToBlob(plain);\n        } catch (err) {\n          this.enablePasswordReinput = true;\n          this.errorMessage = () => this.strings['password_might_be_wrong'];\n          console.log('Decrypt error:', err);\n          return new Blob();\n        } finally {\n          this.isDecrypting = false;\n        }\n      }\n    })();\n\n    // View blob if possible\n    this.viewBlob();\n  }\n\n  private viewRaw() {\n    this.blob = this.rawBlob;\n    this.enablePasswordReinput = false;\n    this.errorMessage = () => '';\n    // View blob if possible\n    this.viewBlob();\n  }\n\n  private cancelDownload(): void {\n    this.xhr.abort();\n    this.canceled = true;\n  }\n\n  private async save(): Promise<void> {\n    const FileSaver = await FileSaverAsync();\n    FileSaver.saveAs(this.blob, this.props.secretPath);\n  }\n}\n</script>\n\n<style scoped>\n.text-view {\n  border: 1px solid #ccc;\n  text-align: left;\n  padding: 0.5em;\n  max-height: 15em;\n  min-height: 4em;\n  overflow-y: scroll;\n  border-radius: 5px;\n}\n</style>\n"]}