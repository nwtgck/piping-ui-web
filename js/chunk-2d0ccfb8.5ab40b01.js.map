{"version":3,"sources":["webpack:///./node_modules/url-join/lib/url-join.js"],"names":["module","exports","definition","this","normalize","strArray","resultArray","length","TypeError","match","first","shift","replace","i","component","push","str","join","parts","split","input","arguments","slice","call"],"mappings":"qGAAA,yBACuCA,EAAOC,QAASD,EAAOC,QAAUC,KACjB,IAAiB,sEAFxE,CAIG,EAAWC,GAAM,WAElB,SAASC,EAAWC,GAClB,IAAIC,EAAc,GAClB,GAAwB,IAApBD,EAASE,OAAgB,MAAO,GAEpC,GAA2B,kBAAhBF,EAAS,GAClB,MAAM,IAAIG,UAAU,kCAAoCH,EAAS,IAInE,GAAIA,EAAS,GAAGI,MAAM,iBAAmBJ,EAASE,OAAS,EAAG,CAC5D,IAAIG,EAAQL,EAASM,QACrBN,EAAS,GAAKK,EAAQL,EAAS,GAI7BA,EAAS,GAAGI,MAAM,gBACpBJ,EAAS,GAAKA,EAAS,GAAGO,QAAQ,gBAAiB,UAEnDP,EAAS,GAAKA,EAAS,GAAGO,QAAQ,gBAAiB,SAGrD,IAAK,IAAIC,EAAI,EAAGA,EAAIR,EAASE,OAAQM,IAAK,CACxC,IAAIC,EAAYT,EAASQ,GAEzB,GAAyB,kBAAdC,EACT,MAAM,IAAIN,UAAU,kCAAoCM,GAGxC,KAAdA,IAEAD,EAAI,IAENC,EAAYA,EAAUF,QAAQ,SAAU,KAIxCE,EAFED,EAAIR,EAASE,OAAS,EAEZO,EAAUF,QAAQ,SAAU,IAG5BE,EAAUF,QAAQ,SAAU,KAG1CN,EAAYS,KAAKD,IAInB,IAAIE,EAAMV,EAAYW,KAAK,KAI3BD,EAAMA,EAAIJ,QAAQ,kBAAmB,MAGrC,IAAIM,EAAQF,EAAIG,MAAM,KAGtB,OAFAH,EAAME,EAAMP,SAAWO,EAAMX,OAAS,EAAI,IAAK,IAAMW,EAAMD,KAAK,KAEzDD,EAGT,OAAO,WACL,IAAII,EAQJ,OALEA,EAD0B,kBAAjBC,UAAU,GACXA,UAAU,GAEV,GAAGC,MAAMC,KAAKF,WAGjBjB,EAAUgB","file":"js/chunk-2d0ccfb8.5ab40b01.js","sourcesContent":["(function (name, context, definition) {\n  if (typeof module !== 'undefined' && module.exports) module.exports = definition();\n  else if (typeof define === 'function' && define.amd) define(definition);\n  else context[name] = definition();\n})('urljoin', this, function () {\n\n  function normalize (strArray) {\n    var resultArray = [];\n    if (strArray.length === 0) { return ''; }\n\n    if (typeof strArray[0] !== 'string') {\n      throw new TypeError('Url must be a string. Received ' + strArray[0]);\n    }\n\n    // If the first part is a plain protocol, we combine it with the next part.\n    if (strArray[0].match(/^[^/:]+:\\/*$/) && strArray.length > 1) {\n      var first = strArray.shift();\n      strArray[0] = first + strArray[0];\n    }\n\n    // There must be two or three slashes in the file protocol, two slashes in anything else.\n    if (strArray[0].match(/^file:\\/\\/\\//)) {\n      strArray[0] = strArray[0].replace(/^([^/:]+):\\/*/, '$1:///');\n    } else {\n      strArray[0] = strArray[0].replace(/^([^/:]+):\\/*/, '$1://');\n    }\n\n    for (var i = 0; i < strArray.length; i++) {\n      var component = strArray[i];\n\n      if (typeof component !== 'string') {\n        throw new TypeError('Url must be a string. Received ' + component);\n      }\n\n      if (component === '') { continue; }\n\n      if (i > 0) {\n        // Removing the starting slashes for each component but the first.\n        component = component.replace(/^[\\/]+/, '');\n      }\n      if (i < strArray.length - 1) {\n        // Removing the ending slashes for each component but the last.\n        component = component.replace(/[\\/]+$/, '');\n      } else {\n        // For the last component we will combine multiple slashes to a single one.\n        component = component.replace(/[\\/]+$/, '/');\n      }\n\n      resultArray.push(component);\n\n    }\n\n    var str = resultArray.join('/');\n    // Each input component is now separated by a single slash except the possible first plain protocol part.\n\n    // remove trailing slash before parameters or hash\n    str = str.replace(/\\/(\\?|&|#[^!])/g, '$1');\n\n    // replace ? in parameters with &\n    var parts = str.split('?');\n    str = parts.shift() + (parts.length > 0 ? '?': '') + parts.join('&');\n\n    return str;\n  }\n\n  return function () {\n    var input;\n\n    if (typeof arguments[0] === 'object') {\n      input = arguments[0];\n    } else {\n      input = [].slice.call(arguments);\n    }\n\n    return normalize(input);\n  };\n\n});\n"],"sourceRoot":""}