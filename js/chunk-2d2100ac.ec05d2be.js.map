{"version":3,"sources":["webpack:///./src/sw-download.ts"],"names":["supportsSwDownload","window","safari","navigator","serviceWorker","ready","retryLimit","Promise","resolve","setTimeout","fetch","res","status","text"],"mappings":"8MACaA,EAAuC,wCAAC,yGAEb,qBAA1BC,OAAeC,OAFwB,0CAG1C,GAH0C,UAK7C,kBAAmBC,UAL0B,0CAM1C,GAN0C,uBAS7CA,UAAUC,cAAcC,MATqB,OAU1CC,EAAa,EAV6B,UAUX,IAAfA,EAV0B,kCAY3C,IAAIC,SAAQ,SAAAC,GAAO,OAAIC,WAAWD,EAAS,QAZA,mCAe7BE,MAAM,wBAfuB,WAezCC,EAfyC,OAiB5B,MAAfA,EAAIC,OAjBuC,kCAkBhCD,EAAIE,OAlB4B,6CAkBjB,OAlBiB,4EAURP,IAVQ,iDAyB5C,GAzB4C,0DAAD","file":"js/chunk-2d2100ac.ec05d2be.js","sourcesContent":["// Check support for streaming-download via Service Worker\nexport const supportsSwDownload: Promise<boolean> = (async () => {\n  // Safari is always unsupported\n  if (typeof (window as any).safari !== 'undefined') {\n    return false;\n  }\n  if (!(\"serviceWorker\" in navigator)) {\n    return false;\n  }\n  // Wait until Service Worker is active\n  await navigator.serviceWorker.ready;\n  for (let retryLimit = 3; retryLimit !== 0; retryLimit--) {\n    // Sleep\n    await new Promise(resolve => setTimeout(resolve, 500));\n    try {\n      // Check whether response can be received\n      const res = await fetch('/sw-download-support');\n      // Success\n      if (res.status === 200) {\n        return await res.text() === 'OK';\n      }\n    } catch(err) {\n      // Noop\n      (() => {})();\n    }\n  }\n  return false;\n})();\n"],"sourceRoot":""}